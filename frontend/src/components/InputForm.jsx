import React, { useState } from 'react';
import { createStory } from '../services/storyServices';

const InputForm = () => {
  const GENRES = ["Kinh d·ªã", "L√£ng m·∫°n", "Vi·ªÖn t∆∞·ªüng", "H√†i", "Trinh th√°m", "C·ªï trang", "Khoa h·ªçc vi·ªÖn t∆∞·ªüng", "K·ª≥ ·∫£o"];
  const LENGTHS = [
    { value: "500", label: "500 t·ª´" },
    { value: "700", label: "700 t·ª´" },
    { value: "1000", label: "1000 t·ª´" },
  ];
  const [formData, setFormData] = useState({
    genre: '',
    length: '',
    setting: '',
    characters: '',
    description: '',
  });
  const [story, setStory] = useState(""); //n∆°i ch·ª©a truy·ªán nh·∫≠n t·ª´ backend
  const [loading, setLoading] = useState(false);
  // X·ª≠ l√Ω thay ƒë·ªïi input 
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value,
    }));
  }
  // X·ª≠ l√Ω g·ª≠i form
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setStory("");
    console.log(formData);

    try {
      const result = await createStory(formData); // üëà g·ªçi API t·ª´ service
      setStory(result.story || result); // üëà backend tr·∫£ text ho·∫∑c object
    } catch (err) {
      console.error("L·ªói t·∫°o truy·ªán:", err);
      setStory("‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi t·∫°o truy·ªán. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  }

  return (
    <>
      <div className="m-7 p-9 bg-slate-900/50 rounded-lg shadow-md border border-purple-500/20">
        <form onSubmit={ handleSubmit }>
          <div className="flex flex-wrap gap-4 mb-4">
            {/* Th·ªÉ lo·∫°i */ }
            <div className="w-1/6">
              <label className="block text-white mb-2" htmlFor="textInput">Th·ªÉ lo·∫°i</label>
              <select
                id="genre"
                name="genre"
                value={ formData.genre }
                onChange={ handleChange }
                className="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                <option value="">Ch·ªçn th·ªÉ lo·∫°i</option>
                { GENRES.map((genre, index) => (
                  <option key={ index } value={ genre }>{ genre }</option>
                )) }
              </select>
            </div>

            {/* ƒê·ªô d√†i */ }
            <div className="w-1/6">
              <label className="block text-white mb-2" htmlFor="length">ƒê·ªô d√†i</label>
              <select
                id="length"
                name="length"
                value={ formData.length }
                onChange={ handleChange }
                className="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              >
                <option value="">Ch·ªçn ƒë·ªô d√†i</option>
                { LENGTHS.map((option, index) => (
                  <option key={ index } value={ option.value }>{ option.label }</option>
                )) }
              </select>
            </div>

            {/* B·ªëi c·∫£nh */ }
            <div className="flex-1">
              <label className="block text-white mb-2" htmlFor="setting">B·ªëi c·∫£nh</label>
              <input
                type="text"
                id="setting"
                name="setting"
                value={ formData.setting }
                onChange={ handleChange }
                className="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="V√≠ d·ª•: M·ªôt th√†nh ph·ªë c·ªï, m·ªôt l√†ng qu√™ y√™n b√¨nh..."
              />
            </div>
          </div>

          <div className="flex gap-4 mb-4">
            {/* Nh√¢n v·∫≠t */ }
            <div className="flex-1">
              <label className="block text-white mb-2" htmlFor="characters">Nh√¢n v·∫≠t</label>
              <input
                type="text"
                id="characters"
                name="characters"
                value={ formData.characters }
                onChange={ handleChange }
                className="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="V√≠ d·ª•: M·ªôt anh ch√†ng th·ª£ r√®n d≈©ng c·∫£m, m·ªôt c√¥ g√°i b√≠ ·∫©n..."
              />
            </div>
          </div>

          {/* M√¥ t·∫£ */ }
          <div className="mb-4">
            <label className="block text-white mb-2" htmlFor="description">M√¥ t·∫£</label>
            <textarea
              id="description"
              name="description"
              value={ formData.description }
              onChange={ handleChange }
              className="w-full px-3 py-2 bg-gray-700 text-white border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              rows="4"
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ c√¢u chuy·ªán b·∫°n mu·ªën t·∫°o..."
            ></textarea>
          </div>

          {/* N√∫t g·ª≠i */ }
          <button
            type="submit"
            className="cursor-pointer bg-gradient-to-r from-purple-600 to-pink-600 text-white px-4 py-2 rounded-md hover:from-purple-700 hover:to-pink-700 transition-colors duration-200"
          >
            { loading ? "ƒêang t·∫°o truy·ªán..." : "Generate Story" }
          </button>
        </form>
        {/* K·∫øt qu·∫£ */ }
        { story && (
          <div className="mt-6 p-4 bg-gray-900 text-white rounded-md whitespace-pre-line">
            <h3 className="text-xl font-bold mb-2 text-purple-400">üìñ C√¢u chuy·ªán c·ªßa b·∫°n:</h3>
            <p>{ story }</p>
          </div>
        ) }
      </div>
    </>
  )
}

export default InputForm;
